public class MinimumBitFlips {
    public static int minFlips(int start, int goal) {
        int count = 0;
        while (start != goal) {
            if ((start & 1) != (goal & 1)) {
                count++;
            }
            start >>= 1;
            goal >>= 1;
        }
        return count;
    }

    public static void main(String[] args) {
        // Test cases
        int start1 = 10, goal1 = 7;
        System.out.println(minFlips(start1, goal1)); // Output: 3

        int start2 = 3, goal2 = 4;
        System.out.println(minFlips(start2, goal2)); // Output: 3
    }
}


//===============================================================Another Important Approach by following KERNIGHANS ALGORITHM=====================================================================
/*
class Solution {
    public int minBitFlips(int start, int goal) {
        int count = 0;
       int flippedBits = start^goal;
       while(flippedBits != 0){ // flippedBits>0
            flippedBits = flippedBits & (flippedBits-1);
            count++;
       }
       return count;


    }
}
*/
