/*
1589. Maximum Sum Obtained of Any Permutation
Solved
Medium
Topics
Companies
Hint
We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.

Return the maximum total sum of all requests among all permutations of nums.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.
A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.
Example 2:

Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
Output: 11
Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].
Example 3:

Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i] <= 105
1 <= requests.length <= 105
requests[i].length == 2
0 <= starti <= endi < n
*/



import java.util.Arrays;
public class MaximumSumPermutation {
    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        int MOD = 1000000007; // or int MOD = (int)Math.pow(10,9)+7;
        int n = nums.length;
        int[] count = new int[n];
        
        // Step 1: Calculate prefix sums
        for (int[] req : requests) {
            count[req[0]]++;
            if (req[1] + 1 < n) {
                count[req[1] + 1]--;
            }
        }
        
        // Step 2: Accumulate counts
        for (int i = 1; i < n; i++) {
            count[i] += count[i - 1];
        }
        
        // Step 3: Sort arrays
        Arrays.sort(nums);
        Arrays.sort(count);
        
        // Step 4: Maximize total sum
        long totalSum = 0;
        for (int i = 0; i < n; i++) {
            totalSum = (totalSum + (long) count[i] * nums[i]) % MOD;
        }
        
        // Step 5: Return maximum sum
        return (int) totalSum;
    }
}




//=========================================explanation of step 1==============================================
/*
Certainly! Let's illustrate Step 1 with an example:

Suppose we have an array nums = [1, 2, 3, 4, 5] and the requests array requests = [[1, 3], [0, 1]].

Initialize Count Array: We start with an array count of size equal to the length of nums, initialized with zeros. This array will store the count of requests for each index.
css
Copy code
count = [0, 0, 0, 0, 0]
Process Requests: For each request in the requests array, we update the count array to indicate the number of requests that cover each index.
For the first request [1, 3], we increment count[1] by 1 and decrement count[4] by 1. This indicates that there is one request that starts at index 1 and ends at index 3.
css
Copy code
count = [0, 1, 0, 0, -1]
For the second request [0, 1], we increment count[0] by 1 and decrement count[2] by 1. This indicates that there is one request that starts at index 0 and ends at index 1.
css
Copy code
count = [1, 1, 0, 0, -1]
Accumulate Counts: We accumulate the counts to obtain the prefix sum of the count array. This step helps us quickly determine the number of requests that cover each index.
css
Copy code
count = [1, 2, 2, 2, 1]
After completing Step 1, the count array contains the count of requests for each index, allowing us to efficiently calculate the sum of any subarray defined by the requests. This preprocessing step is crucial for optimizing the solution.




*/
